%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.6.2 (Build 10C540) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 337 104
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
{ld}repeat pop
/SC{	
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		
/cm {cmmtx astore CM concat}bd	
/W{clip newpath}bd
/W*{eoclip newpath}bd
statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	
    true
}{
    pop	
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse
{	
    { 
	{ 
	    pop pop 
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd
/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd
/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd
/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	
dict begin
{def} repeat
pop		
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	
}bd
/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ 
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ 
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		
/cp_proc/x_proc ld 	
/base_charpath		
{
    /t_array xs
    /t_i 0 def
    { 
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ 
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ 
findfont dup length dict copy definefont pop
}bd
L3? dup dup{save exch}if
/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def
/setupFunEval 
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   
		    
	[ 
	    0 1 nRange 1 sub
	    { 
		    2 mul/nDim2 xd		
		    Range nDim2 get		
		    Range nDim2 1 add get	
		    1 index sub			
						
		    255 div			
		    exch			
	    }for
	]store
    end
}bd
/FunEval 
{
    begin
	
	nRange mul /val xd	
				
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd 
	    val	
	    add DataSource exch get 
	    mulRange nDim2 get mul 	
	    mulRange nDim2 1 add get 
	    add 
	}for	
    end
}bd
/max 
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd
/sh2
{	
	/Coords load aload pop 	
	3 index 3 index translate	
					
	3 -1 roll sub	
	3 1 roll exch 	
	sub				
	2 copy
	dup mul exch dup mul add sqrt	
	dup
	scale  
	atan	
	
	rotate		
	
	/Function load setupFunEval	
	
	
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	
	grestore	
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd
/shp	
{	
	4 copy
	
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
	
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse
	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd
/calcmaxs
{	
	
	xmin dup mul ymin dup mul add sqrt		
	xmax dup mul ymin dup mul add sqrt		
	xmin dup mul ymax dup mul add sqrt		
	xmax dup mul ymax dup mul add sqrt		
	max max max								
}bd
/sh3
{	
	/Coords load aload pop 	
	5 index 5 index translate	
	3 -1 roll 6 -1 roll sub		
	3 -1 roll 5 -1 roll sub		
	2 copy dup mul exch dup mul add sqrt
	/dx xs						
	2 copy 0 ne exch 0 ne or
	{
		
		exch atan rotate	
	}{
		pop pop
	}ifelse
	
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	
	/Nsteps xs		
	setupFunEval		
	
	
	
	
	
	dx r2 add r1 lt{
		
		0 
	}{
		dx r1 add r2 le
		{ 
			1
		}{ 
			r1 r2 eq
			{	
				2
			}{ 
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		
	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	
		{	
			0/Function load FunEval sc	
			
			
			
			
			{ 
				{	
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				}
				{	
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	
					
					
				
					
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	
					
				
					r2 r1 gt{	
						
						0 r1
						r1 neg r2 r1 sub div dx mul	
						0	
						shp	
					}{	
						
						
						
						0 r1 calcmaxs	
						dup
						
						r2 add dx mul dx r1 r2 sub sub div
						neg				
						exch 1 index	
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	
		}if
	}if
	
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	
	
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	
		{	
			Nsteps/Function load FunEval sc	
			
			
			
			
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		
				} 
				{	
					
					
					xmax abs r1 add r1 dx r1 shp
				}	
				{	
			
					r2 r1 gt{
						
						
						
						calcmaxs dup	
						
						r1 add dx mul dx r2 r1 sub sub div	
						exch 1 index	
						exch sub
						dx r2
						shp
					}{	
						
						r1 neg r2 r1 sub div dx mul	
						0		
						dx 		
						r2		
						shp
					}ifelse
				}
			}			
			sh3tp get exec	
		}if
	}if
}bd
/sh		
{	
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	
					2 index sub				
					3 index					
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd
{restore}if not dup{save exch}if
	L3?{	
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if
end
setpacking
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 337 104
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
q
0 0 336.59219 103.22657 rc
180.63907 67.367165 m
180.63907 62.492142 179.35002 58.015625 176.77188 53.937477 c
174.19374 49.859329 170.76019 46.683578 166.4711 44.410133 c
162.18201 42.136688 157.5766 40.999977 152.65469 40.999977 c
150.87344 40.999977 148.90469 41.328102 146.74844 41.984352 c
139.85782 44.304665 l
138.21718 44.773415 137.16251 45.00779 136.69376 45.00779 c
135.70938 45.00779 135.07657 44.738258 134.79532 44.199196 c
134.51407 43.660133 134.37344 42.92186 134.37344 41.984352 c
134.37344 40.999977 l
134.37344 17.234352 l
134.37344 14.63279 l
134.37344 12.007774 134.53751 10.074203 134.86563 8.8320084 c
135.19376 7.5898132 135.9789 6.7109146 137.2211 6.1952896 c
138.46329 5.6796646 140.63124 5.3749771 143.72501 5.2812271 c
146.25626 5.2812271 147.52188 4.6952972 147.52188 3.5234146 c
147.52188 2.304657 146.70157 1.6952896 145.06094 1.6952896 c
143.23282 1.6952896 140.53752 1.7890396 136.97501 1.9765396 c
133.41249 2.1640396 130.71721 2.2577896 128.88907 2.2577896 c
127.10781 2.2577896 124.38908 2.1640396 120.73282 1.9765396 c
117.07655 1.7890396 114.33439 1.6952896 112.50626 1.6952896 c
110.86562 1.6952896 110.04532 2.304657 110.04532 3.5234146 c
110.04532 4.6952972 111.05312 5.2812271 113.06876 5.2812271 c
113.63126 5.2812271 l
116.5844 5.2812271 118.70547 5.5507584 119.99454 6.0898209 c
121.28361 6.6288834 122.10391 7.4843445 122.45547 8.6562271 c
122.80704 9.8281097 122.98282 11.632774 122.98282 14.07029 c
122.98282 17.234352 l
122.98282 76.296852 l
122.98282 79.88279 l
122.98282 83.21093 122.4672 85.414032 121.43594 86.492165 c
120.40469 87.570297 117.85003 88.109352 113.77188 88.109352 c
111.38124 88.109352 110.18594 88.718719 110.18594 89.937477 c
110.18594 91.29686 111.00625 91.97654 112.64688 91.97654 c
114.42814 91.97654 116.9828 91.88279 120.31094 91.69529 c
123.63908 91.50779 126.17031 91.41404 127.90469 91.41404 c
130.52971 91.41404 134.37341 91.50779 139.43594 91.69529 c
144.49847 91.88279 148.2953 91.97654 150.82657 91.97654 c
159.02972 91.97654 165.45154 90.33593 170.09219 87.054665 c
173.27971 84.898407 175.83438 82.027344 177.75626 78.441383 c
179.67813 74.855423 180.63907 71.164062 180.63907 67.367165 c
h
168.68594 66.804665 m
168.68594 70.17968 168.05313 73.425743 166.78751 76.542946 c
165.52188 79.660149 163.64688 82.249969 161.16251 84.312477 c
157.50623 87.687492 152.04535 89.374977 144.77969 89.374977 c
141.49843 89.374977 139.13126 88.976547 137.67813 88.179665 c
136.22499 87.382782 135.31094 86.164047 134.93594 84.523415 c
134.56094 82.882782 134.37344 80.374992 134.37344 76.999977 c
134.37344 55.69529 l
134.37344 52.812477 l
134.37344 50.515587 135.14687 48.92186 136.69376 48.031227 c
138.00626 47.281227 139.82265 46.613258 142.14297 46.027321 c
144.46329 45.441383 146.49063 45.148415 148.22501 45.148415 c
152.06877 45.148415 155.56093 46.144501 158.70157 48.136696 c
161.84221 50.128891 164.29141 52.765587 166.04922 56.046852 c
167.80704 59.328117 168.68594 62.914021 168.68594 66.804665 c
h
187.24844 2.2577896 m
f
245.18594 43.882782 m
245.18594 42.242149 244.62344 41.421844 243.49844 41.421844 c
199.83438 41.421844 l
198.56876 41.421844 l
196.69376 41.421844 195.45157 41.175751 194.84219 40.683563 c
194.23282 40.191376 193.92813 38.960915 193.92813 36.992157 c
193.92813 31.648376 195.05313 26.656242 197.30313 22.015594 c
199.55313 17.374947 202.82263 13.695297 207.11172 10.976532 c
211.40082 8.2577667 216.33435 6.898407 221.91251 6.898407 c
225.19379 6.898407 228.04141 7.3202744 230.45547 8.164032 c
232.86957 9.0077896 234.80313 9.9452744 236.25626 10.976532 c
237.70938 12.00779 239.15079 13.144493 240.58047 14.386688 c
242.01016 15.628883 242.88907 16.249969 243.21719 16.249969 c
243.96719 16.249969 244.34219 15.85154 244.34219 15.054657 c
244.34219 13.976524 242.46722 11.820297 238.71719 8.585907 c
235.34219 5.6796417 231.86176 3.6054459 228.27579 2.3632507 c
224.68985 1.1210556 220.60004 0.49996948 216.00626 0.49996948 c
211.45935 0.49996948 207.18207 1.3554306 203.17422 3.0663757 c
199.16638 4.7773209 195.63908 7.1913605 192.59219 10.308563 c
189.5453 13.425766 187.21329 17.023384 185.5961 21.101532 c
183.97891 25.17968 183.17032 29.351509 183.17032 33.617157 c
183.17032 38.67968 183.95547 43.132759 185.52579 46.976532 c
187.0961 50.820305 189.75624 54.382767 193.50626 57.664032 c
200.77191 64.132812 209.42026 67.367157 219.45157 67.367157 c
228.40475 67.367157 235.31873 64.390625 240.19376 58.437469 c
241.55313 56.796837 242.72501 54.582016 243.70938 51.792938 c
244.69376 49.00386 245.18594 46.367172 245.18594 43.882782 c
h
233.65469 51.828094 m
233.65469 53.281227 233.31485 54.781212 232.63516 56.328094 c
231.95547 57.874977 231.05313 59.187462 229.92813 60.265594 c
227.06876 63.26561 222.89691 64.765594 217.41251 64.765594 c
215.06874 64.765594 212.72502 64.378876 210.38126 63.605438 c
208.03749 62.831997 205.8461 61.69529 203.80704 60.195282 c
201.76797 58.695274 200.06876 57.00779 198.70938 55.132782 c
198.00626 54.148399 197.23282 52.753883 196.38907 50.949188 c
195.54532 49.144493 195.12344 47.749977 195.12344 46.765594 c
195.12344 45.499962 196.22501 44.867157 198.42813 44.867157 c
199.97501 44.867157 l
211.64688 44.867157 l
219.61568 44.867157 225.19376 45.265587 228.38126 46.062469 c
231.89691 46.859352 233.65469 48.781204 233.65469 51.828094 c
h
250.24844 2.257782 m
f
299.81876 59.562469 m
299.81876 57.781212 299.24454 56.374977 298.0961 55.343719 c
296.94766 54.312462 295.48285 53.796844 293.70157 53.796844 c
292.67032 53.796844 291.85001 53.996063 291.24063 54.394501 c
290.63126 54.792938 289.88126 55.484337 288.99063 56.468719 c
288.10001 57.453102 287.36172 58.167938 286.77579 58.613251 c
286.18985 59.058563 285.42813 59.281219 284.49063 59.281219 c
282.19373 59.281219 279.75629 57.54686 277.17813 54.078094 c
275.77188 52.109337 274.86954 50.222633 274.4711 48.417938 c
274.07266 46.613243 273.87344 44.374985 273.87344 41.703094 c
273.87344 39.664032 l
273.87344 16.953094 l
273.87344 15.921837 273.86172 15.113251 273.83829 14.527313 c
273.81485 13.941376 273.77969 13.296844 273.73282 12.593719 c
273.73282 10.296829 274.15469 8.5507584 274.99844 7.3554382 c
275.84219 6.1601181 277.62341 5.4218445 280.34219 5.1405945 c
281.84219 4.9999695 282.88516 4.8593445 283.4711 4.7187195 c
284.05704 4.5780945 284.35001 4.0859146 284.35001 3.242157 c
284.35001 2.2108994 283.78751 1.695282 282.66251 1.695282 c
281.06873 1.695282 278.77191 1.789032 275.77188 1.976532 c
272.77185 2.164032 270.54532 2.257782 269.09219 2.257782 c
267.59219 2.257782 265.31879 2.164032 262.27188 1.976532 c
259.22498 1.789032 256.95157 1.695282 255.45157 1.695282 c
254.09219 1.695282 253.41251 2.1640244 253.41251 3.101532 c
253.41251 3.710907 253.56485 4.1445007 253.86954 4.4023132 c
254.17422 4.6601257 254.51407 4.835907 254.88907 4.929657 c
255.26407 5.023407 255.63907 5.0820007 256.01407 5.1054382 c
256.38907 5.1288757 256.85782 5.1405945 257.42032 5.1405945 c
260.18597 5.4218445 261.99063 6.1601181 262.83438 7.3554382 c
263.67813 8.5507584 264.10001 10.296829 264.10001 12.593719 c
264.10001 13.484352 264.08829 14.246063 264.06485 14.878876 c
264.04141 15.511688 264.00626 16.203094 263.95938 16.953094 c
263.95938 44.023407 l
263.95938 44.867157 l
263.95938 49.414055 263.46719 52.203087 262.48282 53.234344 c
261.82657 53.984344 260.44379 54.359344 258.33438 54.359344 c
256.43594 54.359344 l
255.26407 54.359344 254.67813 54.757774 254.67813 55.554657 c
254.67813 56.304657 254.92422 56.796844 255.41641 57.031219 c
255.9086 57.265594 256.78751 57.593719 258.05313 58.015594 c
259.78754 58.484344 261.95544 59.527306 264.55704 61.144501 c
267.15863 62.761696 268.97501 64.203087 270.00626 65.468719 c
270.33438 65.796844 270.60391 66.089813 270.81485 66.347626 c
271.02579 66.605438 271.2836 66.839813 271.58829 67.050751 c
271.89297 67.261688 272.20938 67.367157 272.53751 67.367157 c
273.42813 67.367157 273.87344 66.781227 273.87344 65.609344 c
273.87344 65.046844 l
273.87344 58.015594 l
273.87344 56.820282 l
273.87344 55.601524 274.10782 54.992157 274.57657 54.992157 c
274.81094 54.992157 275.84216 56.093712 277.67032 58.296844 c
279.49847 60.499977 281.56091 62.410118 283.85782 64.027313 c
286.15472 65.644508 288.73279 66.453094 291.59219 66.453094 c
293.8891 66.453094 295.83435 65.843727 297.42813 64.624969 c
299.02191 63.406212 299.81876 61.718727 299.81876 59.562469 c
h
299.18594 2.257782 m
f
333.28751 3.2421646 m
333.28751 2.210907 332.72501 1.6952896 331.60001 1.6952896 c
330.00623 1.6952896 327.70941 1.7890396 324.70938 1.9765396 c
321.70935 2.1640396 319.48282 2.2577896 318.02969 2.2577896 c
316.52969 2.2577896 314.25629 2.1640396 311.20938 1.9765396 c
308.16248 1.7890396 305.88907 1.6952896 304.38907 1.6952896 c
303.02969 1.6952896 302.35001 2.164032 302.35001 3.1015396 c
302.35001 3.7109146 302.50235 4.1445084 302.80704 4.4023209 c
303.11172 4.6601334 303.45157 4.8359146 303.82657 4.9296646 c
304.20157 5.0234146 304.57657 5.0820084 304.95157 5.1054459 c
305.32657 5.1288834 305.79532 5.1406021 306.35782 5.1406021 c
309.12347 5.4218521 310.92813 6.1601257 311.77188 7.3554459 c
312.61563 8.550766 313.03751 10.296837 313.03751 12.593727 c
313.03751 13.48436 313.02579 14.246071 313.00235 14.878883 c
312.97891 15.511696 312.94376 16.203102 312.89688 16.953102 c
312.89688 82.484352 l
312.94376 83.23436 312.97891 83.914032 313.00235 84.523415 c
313.02579 85.132797 313.03751 85.929657 313.03751 86.91404 c
313.03751 89.210922 312.63907 90.992157 311.84219 92.25779 c
311.04532 93.523422 309.52191 94.156227 307.27188 94.156227 c
305.79532 94.156227 l
304.24841 94.156227 303.47501 94.624969 303.47501 95.562477 c
303.47501 96.406235 304.15469 96.94529 305.51407 97.179665 c
311.23285 98.164047 315.54529 99.640594 318.45157 101.60935 c
319.95157 102.68748 320.95938 103.22654 321.47501 103.22654 c
322.36563 103.22654 322.81094 102.64061 322.81094 101.46873 c
322.81094 100.90623 l
322.81094 16.953102 l
322.81094 15.921844 322.79922 15.113258 322.77579 14.527321 c
322.75235 13.941383 322.71719 13.296852 322.67032 12.593727 c
322.67032 10.296837 323.09219 8.550766 323.93594 7.3554459 c
324.77969 6.1601257 326.56091 5.4218521 329.27969 5.1406021 c
330.77969 4.9999771 331.82266 4.8593521 332.4086 4.7187271 c
332.99454 4.5781021 333.28751 4.0859222 333.28751 3.2421646 c
h
336.59219 2.2577896 m
f
Q
0.21153583 0.28500801 0.48912793 sc
q
0.5 0.56607056 93.612854 93.54567 rc
50.896252 12.983879 m
50.421356 12.923279 50.145897 12.472618 50.145897 11.993332 c
50.145897 10.124596 51.49015 8.4266434 53.038242 8.0465088 c
53.50322 7.9308167 53.947262 7.9660797 54.158821 8.3968964 c
54.373684 8.827713 54.113647 9.3037186 53.683922 9.5174713 c
52.665821 10.023224 52.101673 10.494812 51.869183 12.10791 c
51.800869 12.583916 51.373356 13.046684 50.896252 12.983879 c
h
42.770134 12.10791 m
42.537647 10.494812 41.974598 10.023224 40.956497 9.5174713 c
40.525673 9.3037186 40.267841 8.827713 40.479393 8.3968964 c
40.693153 7.9660797 41.137199 7.9308167 41.602177 8.0465088 c
43.149166 8.4266434 44.49453 10.124596 44.49453 11.993332 c
44.49453 12.472618 44.219063 12.923279 43.743065 12.983879 c
43.267067 13.046684 42.839554 12.583916 42.770134 12.10791 c
h
69.353279 39.777481 m
69.353279 46.336773 65.445038 54.407799 54.551075 63.229183 c
52.636066 64.77948 51.16951 66.644913 50.674782 68.762665 c
50.631809 68.947769 50.668167 69.230942 50.910576 69.29155 c
51.167309 69.355453 51.361229 69.197891 51.49015 68.946671 c
52.805752 66.382668 53.750034 65.552979 55.788452 64.036842 c
62.347744 59.158966 74.602478 52.31319 74.602478 38.886089 c
74.602478 28.492371 65.530975 19.734901 61.652477 17.820984 c
61.127995 17.560951 60.584785 17.463989 60.390858 17.813271 c
60.19363 18.174683 60.4151 18.555923 60.920845 19.075996 c
65.636757 23.945053 69.353279 29.97435 69.353279 39.777481 c
h
42.990505 39.551605 m
42.990505 33.531116 43.409203 28.815208 46.531837 20.262672 c
47.450779 17.750465 48.324539 17.530106 49.020908 17.436455 c
50.321083 17.263451 51.501163 16.887726 52.620644 16.372063 c
53.739017 15.856392 54.802299 15.198586 55.865578 14.209137 c
56.179607 13.921555 56.435234 13.768387 56.728325 13.74305 c
57.021416 13.719917 57.353069 13.814674 57.81805 13.931473 c
68.020058 17.073936 79.816414 25.119614 79.816414 40.193985 c
79.816414 61.056343 50.419147 64.400452 50.254978 76.234276 c
50.202091 80.103966 51.036186 81.59256 51.204769 82.139076 c
51.26757 82.348427 51.189346 82.529129 51.039494 82.583122 c
50.832344 82.659149 50.697914 82.515907 50.628506 82.396912 c
50.359653 81.934135 50.219719 81.447113 49.484787 81.708252 c
48.895298 81.919807 48.70137 83.983566 48.476597 84.611618 c
48.393955 84.845215 48.25182 84.952087 48.068913 84.911308 c
47.883808 84.869453 47.776924 84.710777 47.815487 84.489311 c
47.915756 83.917442 48.819267 80.579964 48.819267 76.024933 c
48.819267 57.039013 42.990505 50.808071 42.990505 39.551605 c
h
46.823826 80.240593 m
46.660755 85.393929 46.326897 89.860817 46.256374 90.795181 c
46.228832 91.186325 45.88726 91.340584 45.662483 91.328476 c
45.432194 91.31414 45.120373 91.132347 45.14241 90.757706 c
45.284546 87.418022 45.598576 82.355042 45.489494 77.601669 c
45.422279 74.632195 45.015701 72.007599 44.6576 70.509087 c
41.763046 58.410809 29.414656 53.604553 28.908907 40.682098 c
28.680822 34.826885 29.75292 25.49424 42.063854 16.982475 c
42.48476 16.690498 43.145863 16.429359 43.582195 16.849159 c
43.87088 17.129028 44.057091 17.597313 43.440056 18.485405 c
39.36763 24.342812 35.026356 30.390846 35.026356 39.194607 c
35.026356 47.38353 38.270191 52.133595 41.395035 57.224121 c
44.032848 61.522427 47.068439 66.23172 46.896549 75.921356 c
46.870106 77.382401 46.871204 78.72776 46.823826 80.240593 c
h
20.656075 40.610481 m
21.408638 53.942822 38.746193 64.578949 42.451702 71.932671 c
43.69128 74.391991 44.091248 75.713104 44.091248 79.77121 c
44.091248 81.686218 43.738655 85.95697 43.715519 86.291931 c
43.683567 86.72937 43.391575 86.863792 43.140358 86.847267 c
42.884724 86.831841 42.586128 86.669861 42.607063 86.251167 c
42.627998 85.830254 42.882523 81.960579 42.873707 79.291901 c
42.86269 76.153839 42.004349 74.831635 41.830257 74.367752 c
38.177639 64.663788 14.599227 59.536896 14.599227 40.193985 c
14.599227 24.639214 27.440145 16.52742 37.837166 13.810272 c
38.274601 13.696762 38.720848 13.786026 38.890533 14.174988 c
39.06683 14.571648 38.854168 15.034424 38.467426 15.207405 c
26.56638 21.387665 20.047855 29.841034 20.656075 40.610481 c
h
47.375854 6.6989441 m
47.897022 6.6989441 48.254028 7.1220551 48.254028 7.6399384 c
48.31683 13.047791 l
48.31683 13.56456 47.897022 13.986565 47.375854 13.986565 c
46.856884 13.986565 46.434872 13.56456 46.434872 13.047791 c
46.497677 7.6399384 l
46.497677 7.1220551 46.856884 6.6989441 47.375854 6.6989441 c
h
94.113968 47.308601 m
94.113968 21.45488 73.156853 0.49996948 47.307533 0.49996948 c
21.457119 0.49996948 0.5 21.45488 0.5 47.308601 c
0.5 73.159027 21.457119 94.11174 47.307533 94.11174 c
73.156853 94.11174 94.113968 73.159027 94.113968 47.308601 c
f
ep
end
%%Trailer
%%EOF
